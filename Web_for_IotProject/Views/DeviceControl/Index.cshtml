@{
    ViewData["Title"] = "Device Control";
    var cameraList = new[] { "cam01", "cam02", "cam03" };
    // bool IsAdmin = ViewBag.IsAdmin;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Device Control Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
        background-color: #f8f9fa;
        }

        .btn-custom {
        min-width: 130px;
        }

        .video-frame {
            border: 2px dashed #ccc;
            padding: 60px;
            text-align: center;
            font-size: 1.2rem;
            color: #666;
            background-color: #fdfdfd;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #liveStream {
            width: 100%; /* Make it take up full width of the container */
            height: 100%; /* Make it take up full height of the container */
            object-fit: cover; /* Ensures the image fills the space without distortion */
            border-radius: 8px;
        }
        iframe#googleMapFrame {
        width: 100%;
        height: 400px;
        border: 0;
        border-radius: 8px;
        }

        .card {
        box-shadow: 0 0 12px rgba(0, 0, 0, 0.05);
        }
    </style>
</head>
<body>
    <div class="container py-4">
        
        <!-- Control Panel -->
        <div class="card mb-3 p-3 text-center">
            <h4 class="mb-3">Device Control Panel</h4>
            <div class="mb-2">
                <label class="fw-bold me-2" for="cameraSelect">Select Camera:</label>
                <select id="cameraSelect" class="form-select d-inline-block w-auto" onchange="changeDevice(this.value)">
                       @foreach (var cam in cameraList)
                {
                    <option value="@cam" selected="@(cam == "cam01" ? "selected" : null)">@cam</option>
                }
                </select>
            </div>

            <div class="d-flex flex-wrap justify-content-center gap-2">
                <button class="btn btn-success btn-custom" onclick="sendCommand('start_stream',)">Start Stream</button>
                <button class="btn btn-danger btn-custom" onclick="sendCommand('stop_stream',)">Stop Stream</button>
                <button class="btn btn-dark btn-custom" onclick="sendCommand('change_mode', 'human')">Human Detection</button>
                <button class="btn btn-warning btn-custom" onclick="sendCommand('change_mode', 'fire')">Fire Detection</button>
                <button class="btn btn-secondary btn-custom" data-bs-toggle="modal" data-bs-target="#settingsModal">⚙️ Settings</button>

            </div>
        </div>
        @* Modify the atribute of device *@
        <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <form onsubmit="saveDeviceSettings(event)">
                        <div class="modal-header">
                            <h5 class="modal-title" id="settingsModalLabel">Edit Device Settings</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="deviceNameInput" class="form-label">Device Name</label>
                                <input type="text" id="deviceNameInput" class="form-control" required />
                            </div>

                            <div class="mb-3">
                                <label for="deviceLocationInput" class="form-label">Location</label>
                                <input type="text" id="deviceLocationInput" class="form-control" required />
                            </div>

                            <div class="row">
                                <div class="col">
                                    <label for="deviceHeightInput" class="form-label">Height</label>
                                    <input type="number" id="deviceHeightInput" class="form-control" value="480" required />
                                </div>
                                <div class="col">
                                    <label for="deviceWidthInput" class="form-label">Width</label>
                                    <input type="number" id="deviceWidthInput" class="form-control" value="640" required />
                                </div>
                            </div>

                            <div class="row mt-3">
                                <div class="col">
                                    <label for="deviceQualityInput" class="form-label">Quality</label>
                                    <input type="number" id="deviceQualityInput" class="form-control" value="35" required />
                                </div>
                                <div class="col">
                                    <label for="deviceFpsInput" class="form-label">FPS</label>
                                    <input type="number" id="deviceFpsInput" class="form-control" value="35" required />
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Save Settings</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>


        <!-- Info and Map Row -->
        <div class="row g-3 mb-3 align-items-stretch">
            <!--  Device Map -->
            <div class="col-md-6">
                <div class="card p-3 h-100">
                    <iframe id="googleMapFrame"
                            src=""
                            allowfullscreen
                            loading="lazy"
                            referrerpolicy="no-referrer-when-downgrade"
                            style="width: 100%; height: 100%; min-height: 250px; border: 0; border-radius: 8px;">
                    </iframe>
                </div>
            </div>

            <!--  Device Info -->
            <div class="col-md-6">
                <div class="card p-3 h-100">
                    <div id="deviceInfoContent" class="row row-cols-2 g-2 text-center fw-semibold">
                        <div class="col">Loading...</div>
                    </div>
                </div>
            </div>
        </div>

        <!--  Camera Feed -->
        <div class="card p-3">
            <div class="video-frame"
                 @* style="height: 450px; background-color: #f0f0f0; display: flex; justify-content: center; align-items: center; font-size: 1.25rem; border-radius: 8px;" *@>
                <img id="liveStream" src="/stream/human/cam01"  />
                 @* width="640" *@ 
            </div>
            <h5 class="text-center mt-3 mb-2">Live Camera Feed</h5>
        </div>

    </div>

</body>
</html>
<script>
    let currentDeviceId = 'cam01';
    let detectionMode = 'human';

    function changeDevice(newDeviceId)
    {
        if (newDeviceId === currentDeviceId) return;

        currentDeviceId = newDeviceId;
        document.getElementById('deviceName').innerText = newDeviceId;
        loadDeviceInfo();
    }

    function sendCommand(command, parameter = null,deviceId =currentDeviceId )
    {
        console.log("Device ID in sendCommand:", deviceId );
        fetch('/DeviceControl/SendCommand', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                deviceId: currentDeviceId,
                command: command,
                parameter: parameter
            })
        })
        .then(response => response.json())
        .then(data => {
            alert("✅ Command sent to " + currentDeviceId + ": " + command);

            // If changing mode, update detectionMode and image source
            if (command === "change_mode" && parameter) {
                detectionMode = parameter;
                updateStreamSrc();
            }
        })
        .catch(error => {
            
            alert("❌ Error sending command: " + error.message);
        });
    }


    function loadDeviceInfo()
    {
        fetch(`/DeviceControl/GetDeviceInfo?deviceId=${currentDeviceId}`)
            .then(response => {
                if (!response.ok) throw new Error("Not found");
                return response.json();
            })
            .then(device => {
                const panel = document.getElementById("deviceInfoContent");
                panel.innerHTML = `
                    <div class="col"><strong>ID:</strong><br>${device.deviceId}</div>
                    <div class="col"><strong>Name:</strong><br>${device.deviceName}</div>
                    <div class="col"><strong>Location:</strong><br>${device.location}</div>
                    <div class="col"><strong>IP:</strong><br>${device.ipAddress}</div>
                    <div class="col"><strong>MAC:</strong><br>${device.macAddress}</div>
                    <div class="col"><strong>Status:</strong><br>
                        <span class="${device.status === true ? 'text-success' : 'text-danger'}">
                            ${device.status === true ? 'Online' : 'Offline'}
                        </span>
                    </div>
                    <div class="col"><strong>Height:</strong><br>${device.height}</div>
                    <div class="col"><strong>Width:</strong><br>${device.width}</div>
                    <div class="col"><strong>Quality:</strong><br>${device.quality}</div>
                    <div class="col"><strong>FPS:</strong><br>${device.fps}</div>
                    <div class="col"><strong>Last Seen:</strong><br>${device.lastSeen}</div>
                `;

            const [lat, lng] = device.location.split(',').map(x => x.trim());
            const mapUrl = `https://www.google.com/maps?q=${lat},${lng}&hl=en&z=14&output=embed`;
            document.getElementById("googleMapFrame").src = mapUrl;
        })
        .catch(() => {
            document.getElementById("deviceInfoContent").innerHTML =
                `<div class="col text-danger">Failed to load device info</div>`;
        });
    }

    function updateStreamSrc() 
    {
        const streamImg = document.getElementById("liveStream");
        streamImg.src = `/stream/${detectionMode}/${currentDeviceId}`;
    }



    function openSettingsModal() 
    {
        fetch(`/DeviceControl/GetDeviceInfo?deviceId=${currentDeviceId}`)
            .then(res => res.json())
            .then(device => {
                document.getElementById("deviceNameInput").value = device.deviceName;
                document.getElementById("deviceLocationInput").value = device.location;
                document.getElementById("deviceHeightInput").value = device.height || 480;
                document.getElementById("deviceWidthInput").value = device.width || 640;
                document.getElementById("deviceQualityInput").value = device.quality || 35;
                document.getElementById("deviceFpsInput").value = device.fps || 35;
            });
    } // not done yet( api function)

    document.getElementById("settingsModal").addEventListener("show.bs.modal", openSettingsModal);

    // function saveDeviceSettings(event) 
    // {
    //     event.preventDefault();

    //     const updatedSettings = {
    //         deviceId: currentDeviceId,
    //         deviceName: document.getElementById("deviceNameInput").value,
    //         location: document.getElementById("deviceLocationInput").value,
    //         height: parseInt(document.getElementById("deviceHeightInput").value),
    //         width: parseInt(document.getElementById("deviceWidthInput").value),
    //         quality: parseInt(document.getElementById("deviceQualityInput").value),
    //         fps: parseInt(document.getElementById("deviceFpsInput").value)
    //     };

    //     fetch('/DeviceControl/UpdateDeviceSettings', {
    //         method: 'POST',
    //         headers: { 'Content-Type': 'application/json' },
    //         body: JSON.stringify(updatedSettings)
    //     })
    //     .then(res => {
    //         if (!res.ok) throw new Error("Update failed");
    //         return res.json();
    //     })
    //     .then(() => {
    //         alert("✅ Device settings updated!");
    //         loadDeviceInfo();
    //         bootstrap.Modal.getInstance(document.getElementById("settingsModal")).hide();
    //     })
    //     .catch(() => {
    //         alert("❌ Failed to update settings");
    //     });
    // }



    function saveDeviceSettings(event) 
    {
        event.preventDefault();
        const deviceId = currentDeviceId;

        const deviceName = document.getElementById('deviceNameInput').value;
        const location = document.getElementById('deviceLocationInput').value;
        const height = parseInt(document.getElementById('deviceHeightInput').value);
        const width = parseInt(document.getElementById('deviceWidthInput').value);
        const quality = parseInt(document.getElementById('deviceQualityInput').value);
        const fps = parseInt(document.getElementById('deviceFpsInput').value);


        // Send to server for DB update
        fetch('/DeviceControl/UpdateDeviceSettings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                deviceId,
                deviceName,
                location,
                height,
                width,
                quality,
                fps
            })
        })
        .then(response => {
            if (!response.ok) throw new Error("Update failed");
            return response.json();
        })
        .then(data => {
            alert("✅ Settings saved");
            console.log("Device ID:", currentDeviceId);
            // ✅ Send to device via control command
            sendCommand("update_settings", {
                deviceName:deviceName,
                location:location,
                height: height,
                width: width,
                quality: quality,
                fps: fps
            });
            console.log("Device ID:", currentDeviceId);
            // Reload UI
            loadDeviceInfo();
            const modal = bootstrap.Modal.getInstance(document.getElementById('deviceSettingModal'));
            if (modal) modal.hide();
        })
        .catch(() => alert("❌ Failed to save settings"));
    }





    function parseDMS(dmsStr) {
        try {
            const parts = dmsStr.trim().split(/\s+/);
            if (parts.length !== 2) return null;

            const lat = fixDMS(parts[0], 'lat');
            const lng = fixDMS(parts[1], 'lng');

            return { lat, lng };
        } catch {
            return null;
        }
    }

    function fixDMS(dmsPart, type) {
        // Ensure degrees are present
        if (dmsPart.startsWith("°")) {
            dmsPart = (type === 'lat' ? "0" : "") + dmsPart;
        }

        const regex = /(\d*)°(\d+)'([\d.]+)([NSEW])/;
        const match = dmsPart.match(regex);
        if (!match) return null;

        let degrees = parseFloat(match[1] || "0");
        let minutes = parseFloat(match[2]);
        let seconds = parseFloat(match[3]);
        const direction = match[4];

        let decimal = degrees + (minutes / 60) + (seconds / 3600);
        if (direction === 'S' || direction === 'W') decimal *= -1;

        return decimal.toFixed(6);
    }



    // Load initial info
    document.addEventListener('DOMContentLoaded', loadDeviceInfo);
</script>
